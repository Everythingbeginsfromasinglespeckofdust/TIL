01 함수
	1. 수를 담아서 처리하는 논리적인 공간
	   프로그램 내의 특정한 기능을 담당하는 작은 프로그램으로 해석
	   모듈화에 사용된다.

	2. 모듈이란
	   모듈 : 독립되어 있는 프로그램의 일부분
	   모듈러 프로그래밍 : 모듈 개념을 사용하는 프로그래밍 기법
 	 모듈러 프로그래밍의 장점
   	   1. 각 모듈들은 독자적으로 개발이 가능하다
   	   2. 다른 모듈과 독립적으로 변경 가능
     	   3. 유지 보수가 쉬워진다
    	   4. 모듈의 재사용 가능

	C언어에서는 모듈과 함수가 같은 말이다.
	함수(function) : 특정한 작업을 수행하는 독립적인 부분
	함수 호출(function call) : 함수를 호출하여 사용하는 것
	함수는 입력을 받으면 출력을 생성한다

	함수들의 연결
	프로그램은 여러 개의 함수들로 이루어져 있다
	함수 호출을 통하여 서로 연결된다
	제일 먼저 호출되는 함수는  main()이다

02 함수의 종류
	1. 사용자 정의 함수
	2. 라이브러리 함수
	3. 함수의 정의
 	   반환형(return type)
 	   함수 헤더(function header)
	  함수 몸체(function body)
	4. void를 쓰는 이유
 	   void : 반환하지 않는다는 뜻
  	   C언어에서 main() 함수의 반환형은 반드시 정의되어야 한다. void 반환형은 main() 함수가 값을 반환하지 않음을 나타내며, 이는 프로그램이 종료될 때 어떤 값도 반환하지 않는 것을 의미.
 	   따라서 void 반환형을 사용하는 것은 C언어에서 권장되는 방식이다. 프로그램이 종료될 때 반환되는 값이 없기 때문에 오류가 발생할 가능성이 줄어든다.
  	   또한 main 함수가 반환되는 값을 사용하는 경우는 드물기 때문에 일반적으로 void인 main함수는 프로그램의 실행에 문제가 없다.

03 예제 함수의 필요성
  1. 오류가 생겼을 때 대응하기 편해짐.
  2. 보기에 편해짐.
  3. 사용의 효율성
  예시)
    void PrintHello()	// 함수의 헤더(선언부)
    {
      int n = 0;		// 함수의 본체
      printf("반복횟수를 입력하세요 >>> ");
      scanf_s("%d", &n);
      for (int i = 0; i < n; i++)
      {
        printf("Hello world!\n");
      }
    }
    int main()
    {
      PrintHello(); // 함수 호출
      // 작업 1
      // 작업 2
      PrintHello();
    }

04 함수의 형태 확인

  int sum1(int x, int y) // 매개변수
  {
    return x + y;
  }

  int sum2() // 매개변수는 아니다 / 리턴된 값을 받고 값이 대입됌
  {
    printf("두 수를 입력하세요 >> ");
    int x = 0, y = 0;
    scanf_s("%d%d", &x, &y);
    return x + y; // sum2의 값을 x + y로 리턴
  }

  int sum3(int x, int y)
  {
    printf("sum3(%d,%d) = %d\n", x, y, x + y);
  }

  int sum4() // 매개변수가 아니다 = 인수를 받을 수 없다
  {
    int x, y = 0;
    printf("두 수 입력 : ");
    scanf_s("%d%d", &x, &y);
    printf("두 수의 합 : %d\n", x + y);
  }

  int main()
  {
    int n1 = sum1(100, 300);// 인수
    printf("\nsum1은 %d이다.\n", n1);
    int n2 = sum2(); // sum2가 리턴된 값을 같고 n2 역시도 대입됌
    printf("sum2는 %d이다.\\n", n2); // 리턴된 값을 출력

    sum3(1000, 2000);

    sum4(1000, 2000);
    }

05 함수 호출

  함수 호출(function call)

    1. 함수를 사용하기 위하여 함수의 이름을 적어주는 것
    2. 함수안의 문장들이 순차적으로 실행된다
    3. 문장의 실행이 끝나면 호출한 위치로 되돌아간다
    4. 결과값을 전달할 수 있다.

  인수와 매개변수
    인수(Argument) : C언어에서 함수를 호출할 때 함수에 인수(argment)를 전달할 수 있다. 함수 인수는 함수 호출 시 괄호 안에 쉼표로 구분하여 전달
    함수 인수를 사용하면 함수가 실행될 때 내부에서 인수를 참조할 수 있다
    매개변수(parameter) : 함수 선언부나 정의부에서 함수가 호출될 때 전달되는 값을 저장하기 위한 변수
    매개변수는 함수 내에서 지역변수와 마찬가지로 사용되며, 함수 호출 시에 전달된 인수(argment)값이 저장된다
	예시)
	int add(int a, int b)	// 매개변수 a, b는 함수에 전달되는 인수 값을 저장하기 위한 변수 이름.
	{						// 매개변수의 데이터의 타입과 변수 이름 사이는 쉼표로 구분.
	int sum = a + b;	// 계산
	return sum;			// sum의 값을 반환
	}
	int main()
	{
	int result = add(8, 7); // 함수를 호출
	printf("%d", result);	// 출력
	}

문제 1 다음 조건을 만족하는 함수를 만드세요
	반환 자료명 : int 함수명 : sum 매개변수 : 4개의 정수값을 다른 함수로부터(main) 전달 받음
	짝수는 짝수끼리 합출력, 홀수는 홀수끼리 합출력, 전달받은 모든 수의 합을 return한 후 result라는 변수에 담아 printf를 써서 출력하시오

	int sum(int a, int b, int c, int d)
	{
	int even_sum = 0; // 짝수 합
	int odd_sum = 0; // 홀수 합

	int numbers[] = { a, b, c, d };
	for (int i = 0; i < 4; i++) {
	    if (numbers[i] % 2 == 0) {
	        even_sum += numbers[i];
	    }
	    else {
	        odd_sum += numbers[i];
	    }
	}

	printf("홀수의 합: %d\\n", odd_sum);
	printf("짝수의 합: %d\\n", even_sum);
	return a+b+c+d;
	}

	int main(void)
	{
	int result = sum(10, 11, 20, 21);
	printf("result = %d\n", result);
	}

06 지역 변수
  {} 지역에서 생성되고 {}를 벗어나면 소멸되는 변수, 특정한 함수, 블럭(block) 또는 문(statement)내에서 정의된 변수이다.
  지역변수는 정의된 블럭 또는 문 내에서만 유효하며 함수나 블럭이 끝나면 메모리에서 해제된다.
	예시)
	void Func()
	{
	  int num = 10;
	  num++;
	  printf("첫번째 num = %d\n", num);
	}

	int main()
	{
	  int num = 10;
	  num++;
	  num++;
	  Func(); // 함수 호출
	  printf("두번째 num = %d\n", num);
	}
예시 2)
	int main()
	{
		int num = 10;
		if (num % 2 == 0)
		{
		int num = 12;
		printf("if 안의 num = %d\n", num);
		}
	printf("main의 num = %d\n", num);

	for (int i = 0; i < 3; i++)
	{
		int num = i;
		printf("for안의 num = % d\n", num);
	}
	printf("main의 num = %d\n", num);
	}

07 전역 변수
  1. 전역변수는 프로그램 전체에서 사용 가능한 변수이다. 전역변수는 모든 함수나 블럭 외부에서 정의되며, 프로그램이 종료될 때까지 메모리에서 유지된다.
  2. 전역변수는 프로그램 내에서 어디에서든지 사용할 수 있으므로, 프로그래므이 다른 부분에서 변수명이 중복되어 사용될 가능성이 있다. 따라서 전역변수는 가능한 사용을 최소화 해야 한다.
	예시)
	int num = 10; // 전역변수

	void Func1()
	{
  	  int num = 5;// 지역변수가 전역변수보다 우선시
	  num++;
	  printf("num = %d\n", num); // 6으로 출력
	}

	void Func2()
	{
	  num++;// 전역변수의 값 1 증가
	  printf("num = %d\n", num);// 11로 출력
	}

	void Func3()
	{
	  num++;// 전역변수의 값 11에서 12로 증가
	  printf("num = %d\n", num);// 12로 출력
	}

	int main()
	{
	  Func1();// 6
	  Func2();// 11
	  Func3();// 12
	}
